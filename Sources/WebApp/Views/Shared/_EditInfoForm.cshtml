@using ModelLib.Convert.Attributes;
@using ModelLib.Convert.Table;
@using ModelLib.DTO;
@using ModelLib.Model;
@using WebApp.Extensions;
@using WebApp.Models.PageModels;
@using WebApp.Settings;
@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims;

@model DataEditor;

@{
    dynamic userModel = new { };
    var userIsAuth = Context.User.Identity != null && Context.User.Identity.IsAuthenticated;

    if (userIsAuth)
    {
        userModel = new
        {
            Name = Context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value,
            Surname = Context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Surname)?.Value,
            PermissionName = Context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value,
        };
    }

    TranslateMetadata<IMetaData> meta = new();
    TableValueResult? result = new();

    string routing = string.Empty;

    switch (Model.TypeName)
    {
        case nameof(CabinetDTO):
            meta.Assign<CabinetDTO>();

            if (Model.DataValue != null)
                result = meta.GetValues<CabinetDTO>(Model.DataValue, withNotInclude: true);

            routing = "send-data-cabinet";
            break;
        case nameof(EquipmentDTO):
            meta.Assign<EquipmentDTO>();

            if (Model.DataValue != null)
                result = meta.GetValues<EquipmentDTO>(Model.DataValue, withNotInclude: true);

            routing = "send-data-equipment";
            break;
        case nameof(UpdateUserDTO):
            meta.Assign<UpdateUserDTO>();

            if (Model.DataValue != null)
                result = meta.GetValues<UpdateUserDTO>(Model.DataValue, withNotInclude: true);

            routing = "send-data-user";
            break;
    }
}

<div id="add-edit-container">
    <div id="add-edit-container-bg"></div>

    <div id="add-edit-form-container">
        <div id="add-edit-form-meta">
            <p id="add-edit-form-title">
            @{
                string formTitle = Model.SendType == SendType.Edit ? "Редактирование" : "Добавление";
                @formTitle
            }
            </p>
            <button class="defaultButton" id="close-add-edit-form">X</button>
        </div>

        <form id="add-edit-form" method="post" action="@routing">
            @{
                if (result != null)
                {
                    <input value="@result["Id"]" name="Id" type="hidden" required/>
                    <input value="@Model.SendType" name="sendType" type="hidden" required />

                    var formProperties = meta.GetFormPropName();

                    foreach (var property in formProperties)
                    {
                        if (meta.HasAttribute<ShowPermission>(property.Key))
                            if (!meta.CompareAttributesValues<ShowPermission>(property.Key, "Permissions", userModel.PermissionName))
                                continue;

                        if (meta.HasAttribute<SelectedValue>(property.Key))
                        {
                            <div class="add-edit-select-container">
                                <p class="add-edit-row-title">@property.Value</p>
                                <div class="custom-select">
                                    <select name="@property.Key" required>
                                        @{
                                            string typeName = property.Key;
                                            int? currentValue = null;

                                            var res = result[property.Key];

                                            if (res != null)
                                            {
                                                currentValue = (int)res?.GetType().GetProperties()[0].GetValue(res, null);
                                            }
                                            // var res = result[property.Key];

                                            // if (res?.GetType().Name is string typeName)
                                            // {
                                            //     int? currentValue = (int)res?.GetType().GetProperties()[0].GetValue(res, null);

                                                
                                            // }

                                            var selections = await GetEditFormSelectionValues(typeName);
                                            if (selections != null)
                                            {
                                                foreach (var selection in selections)
                                                {
                                                    var type = selection.GetType();
                                                    var props = type.GetProperties();

                                                    int id = 0;
                                                    string name = string.Empty;

                                                    if (type is UserDTO user)
                                                    {
                                                        id = user.Id;
                                                        name = $"{user.Surname} {user.Name} {user.Patronymic}";
                                                    }
                                                    else
                                                    {
                                                        id = props[0].GetValue(selection, null);
                                                        name = props[1].GetValue(selection, null);
                                                    }

                                                    bool isSelected = currentValue.HasValue ? currentValue == id : false;

                                                    if (isSelected)
                                                    {
                                                        <option value="@id" selected>@name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@id">@name</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        }
                        else
                        {
                            if (result[property.Key] is DateTime dateTime) 
                            {
                                <div class="add-edit-input-value-container">
                                    <p class="add-edit-row-title">@property.Value</p>
                                    <input type="date" name="@property.Key" class="add-edit-row-input-value" value="@dateTime.ToString("yyyy-MM-dd")" required>
                                </div>
                            }
                            else
                            {
                                <div class="add-edit-input-value-container">
                                    <p class="add-edit-row-title">@property.Value</p>
                                    @{
                                        if (meta.HasAttribute<RequiredAttribute>(property.Key))
                                        {
                                            <input type="text" name="@property.Key" class="add-edit-row-input-value" value="@result[property.Key]" required />
                                        }
                                        else
                                        {
                                            <input type="text" name="@property.Key" class="add-edit-row-input-value" value="@result[property.Key]" />
                                        }
                                    }
                                </div>
                            }
                        }
                    }
                }
            }
        </form>

        <div id="add-edit-form-buttons">
            @{
                string sendButtonTitle = Model.SendType == SendType.Edit ? "Изменить" : "Добавить";
            }
            <input type="submit" form="add-edit-form" class="defaultButton" value="@sendButtonTitle" id="change-send" />
        </div>
    </div>
</div>

@{
    async Task<IEnumerable<dynamic>?> GetEditFormSelectionValues(string typeName)
    {
        List<dynamic>? selectionItems = typeName switch
        {
            "EquipmentType" => (await AppSettings.Api.Client.GetFromJsonAsync<List<EquipmentType>>(AppSettings.Api.ApiRequestUrl(ApiRequestType.EquipmentType, "all")))?.Cast<dynamic>().ToList(),
            "Permission" => (await AppSettings.Api.Client.GetFromJsonAsync<List<Permission>>(AppSettings.Api.ApiRequestUrl(ApiRequestType.Permission, "all")))?.Cast<dynamic>().ToList(),
            "UserDTO" => (await AppSettings.Api.Client.GetFromJsonAsync<List<User>>(AppSettings.Api.ApiRequestUrl(ApiRequestType.User, "all")))?.Cast<dynamic>().ToList(),
            _ => null
        };

        return selectionItems;
    }
}